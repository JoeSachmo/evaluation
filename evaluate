#!/usr/bin/env python
import argparse # optparse is deprecated
import sys
from itertools import islice # slicing for iterators
 
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    alpha = 0.25
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        rset = set(ref)
        h1_match = word_matches(h1, rset)
        h2_match = word_matches(h2, rset)
        h1_prec = h1_match/float(len(h1))
        h1_recall = h1_match/float(len(ref))
        h2_prec = h2_match/float(len(h2))
        h2_recall = h2_match/float(len(ref))
        l1 = 0
        if ((1-alpha)*h1_recall + alpha*h1_prec) != 0:
            l1 = h1_prec * h1_recall/((1-alpha)*h1_recall + alpha*h1_prec)
        l2 = 0
        if ((1-alpha)*h2_recall + alpha*h2_prec) != 0:
            l2 = h2_prec * h2_recall/((1-alpha)*h2_recall + alpha*h2_prec)
        print(1 if l1 > l2 else # \begin{cases}
                (0 if l1 == l2
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
