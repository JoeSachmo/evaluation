#!/usr/bin/env python
import argparse # optparse is deprecated
import sys
from collections import defaultdict
from math import log
from itertools import islice # slicing for iterators
 
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)

def set_ngram(size, ngram):
    x = ngram[0]
    for i in range(size-1):
        x += " " + ngram[i+1]
    return x
    

def create_data(sent, sSet, sDict):
    i = 0
    size = len(sent)
    for x in sent:
        if x in sSet:
            sDict[x] = sDict[x] + 1
        else:
            sSet.add(x)
            sDict[x] = 1
        if i <= size - 2:
        #if 3<2:
            gram2 = set_ngram(2,sent[i:i+2])
            if gram2 in sSet:
                sDict[gram2] = sDict[gram2] + 1
            else:
                sSet.add(gram2)
                sDict[gram2] = 1
            if i <= size - 3:
            #if 3<2:
                gram3 = set_ngram(3,sent[i:i+3])
                if gram3 in sSet:
                    sDict[gram3] = sDict[gram3] + 1
                else:
                    sSet.add(gram3)
                    sDict[gram3] = 1
                if i <= size - 4:
                #if 3 < 2:
                    #sys.stderr.write("hello\n")
                    gram4 = set_ngram(4,sent[i:i+4])
                    if gram4 in sSet:
                        sDict[gram4] = sDict[gram4] + 1
                    else:
                        sSet.add(gram4)
                        sDict[gram4] = 1
        i += 1 
 
def ngram_sets(h1Set, h2Set, refSet, h1Dict, h2Dict, refDict, h1, h2, ref):
    create_data(h1, h1Set, h1Dict)
    create_data(h2, h2Set, h2Dict)
    create_data(ref, refSet, refDict) 

def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    alpha = 0.25
    i = 1
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        
        h1Set = set()
        h2Set = set()
        refSet = set()
        h1Dict = dict()
        h2Dict = dict()
        refDict = dict()
        ngram_sets(h1Set, h2Set, refSet, h1Dict, h2Dict, refDict, h1, h2, ref)
        
        h1Count = defaultdict(lambda: 0)
        h1Size = defaultdict(lambda: 0)
        for ngram in h1Set:
            n = len(ngram.split())
            if ngram in refSet:
                h1Count[n] += h1Dict[ngram] if h1Dict[ngram]<refDict[ngram] else refDict[ngram]
            h1Size[n] += h1Dict[ngram]
            
        #sys.stderr.write("BLEU1\n")
        for x in h1Size:
            if i == 360:
                sys.stderr.write("{} : count={}, size={}\n".format(x,h1Count[x],h1Size[x]))
            h1Count[x] = h1Count[x]/float(h1Size[x])
        
        h2Count = defaultdict(lambda: 0)
        h2Size = defaultdict(lambda: 0)
        for ngram in h2Set:
            n = len(ngram.split())
            if ngram in refSet:
                h2Count[n] += h2Dict[ngram] if h2Dict[ngram]<refDict[ngram] else refDict[ngram]
            h2Size[n] += h2Dict[ngram]
        
        #sys.stderr.write("BLEU2\n")
        for x in h2Size:
            if i == 360:
                sys.stderr.write("{} : count={}, size={}\n".format(x,h2Count[x],h2Size[x]))
            h2Count[x] = h2Count[x]/float(h2Size[x])
        
        BP1 = pow((7/float(8)),len(ref) - len(h1)) - 1 if len(ref)>len(h1) else 0
        BP2 = pow((7/float(8)),len(ref) - len(h2)) - 1 if len(ref)>len(h2) else 0
        w = 1/float(4)
        
        BLEU1 = 0
        for x in h1Count:
            if h1Count[x] != 0:
                BLEU1 += w*h1Count[x]
        #BLEU1 += BP1
        #sys.stderr.write("{}\n".format(BLEU1))
        
        BLEU2 = 0
        for x in h2Count:
            if h2Count[x] != 0:
                BLEU2 += w*h2Count[x]
        #BLEU2 += BP2
        
        #sys.stderr.write("{}\n{}\n".format(BLEU1,BLEU2))
        #sys.stderr.write("BLEU1: {} BLEU2: {}\n".format(h2Count[2],BLEU2))
        #exit(1)
        i += 1
        
        print(1 if BLEU1 > BLEU2 else # \begin{cases}
                (0 if BLEU1 == BLEU2
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
